(in-package :js-game)

(defparameter *my-error-log* nil)
(defparameter *my-main-window* nil)
(defparameter *update-queue* nil)

(declaim (optimize (debug 3) (safety 3) (speed 1) (space 0)))
;(declaim (optimize (speed 3) (space 2) (debug 0) (safety 0)))

(load "js-lib.lisp")
(load "maps.lisp")
(load "tiles.lisp")
(load "objects.lisp")
(load "input.lisp")
(load "graphics.lisp")

(defun initialize-program ()
  (setf *my-error-log* (open "error.log" :direction :output :if-exists :supersede))
  (initialize-object :player)
  (initialize-object :item)
  (initialize-object :item)
  (initialize-object :enemy)
  (initialize-object :enemy)
  (initialize-object :enemy)
  (initialize-main-window))

(defun update ()
  (update-agents *update-queue*)
  (dolist (visible-tile (hash-keys (agent-visible-tiles (get-player))))
	 (let ((y-offset (nth 0 visible-tile))
			 (x-offset (nth 1 visible-tile)))
		(set-tile-memory y-offset x-offset (get-tile-value y-offset x-offset))))
  (setf *update-queue* nil))

(defun close-down ()
  (close *my-error-log*)
  (close-glfw-and-window))

(defun run-program (main-window)
  (loop until (%glfw:window-should-close-p main-window)
	 do (input-processing)
	 (if *update-queue*
		(update)
		(compute-vision (get-player)))
	 (render (object-location (get-player)))))

(defun start ()
  (load "main.lisp")
  (let ((main-window (initialize-program)))
	 (setf *my-main-window* main-window)
	 (run-program main-window))
  (close-down))

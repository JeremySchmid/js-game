(ql:quickload "cl-glu")
(ql:quickload "cl-glfw3")
(ql:quickload "alexandria")

(defparameter *my-error-log* nil)
(defparameter *my-main-window* nil)
(defparameter *update-queue* nil)

(declaim (optimize (debug 3) (safety 3) (speed 1) (space 0)))
;(declaim (optimize (speed 3) (space 2) (debug 0) (safety 0)))

(defun hash-keys (table)
  (loop for key being the hash-keys of table collect key))

(defun hash-values (table)
  (loop for key in (hash-keys table)
		  collect (gethash key table)))

(load "agents.lisp")
(load "input.lisp")
(load "tiles.lisp")
(load "maps.lisp")
(load "graphics.lisp")
	
(defun initialize-game ()
  (setf *my-error-log* (open "error.log" :direction :output :if-exists :supersede))
  (initialize-agent :player)
  (initialize-agent :item)
  (initialize-agent :item)
  (initialize-agent :enemy)
  (initialize-agent :enemy)
  (initialize-agent :enemy)
  (initialize-main-window))

(defun exec-key (key)
  (case key
	 ((:9 :kp-9) (move (get-player) 9))
	 ((:8 :kp-8) (move (get-player) 8))
	 ((:7 :kp-7) (move (get-player) 7))
	 ((:6 :kp-6) (move (get-player) 6))
	 ((:4 :kp-4) (move (get-player) 4))
	 ((:3 :kp-3) (move (get-player) 3))
	 ((:2 :kp-2) (move (get-player) 2))
	 ((:1 :kp-1) (move (get-player) 1))
	 (t (princ "not found~%"))))

(defun update ()
  (dolist (key *update-queue*)
	 (exec-key key))
  (update-agents)
  (dolist (visible-tile (hash-keys (agent-visible-tiles (get-player))))
	 (let ((y-offset (nth 0 visible-tile))
			 (x-offset (nth 1 visible-tile)))
		(set-tile-memory y-offset x-offset (get-tile-value y-offset x-offset))))
  (setf *update-queue* nil))

(defun close-down ()
  (close *my-error-log*)
  (close-glfw-and-window))

(defun run-game (main-window)
  (unless (%glfw:window-should-close-p main-window)
	 (input-processing)
	 (update)
	 (render (agent-location (get-player)))
	 (run-game main-window)))

(defun start ()
  (load "game.lisp")
  (let ((main-window (initialize-game)))
	 (setf *my-main-window* main-window)
	 (run-game main-window))
  (close-down))
